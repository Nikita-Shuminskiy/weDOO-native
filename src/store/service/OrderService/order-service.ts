import RootStore from '../../RootStore/root-store';import {OrdersResponseType, SendDataOrderType, StatusType} from "../../../api/ordersApi";import {LoadingEnum} from "../../types/types";export class OrderService {    rootStore: typeof RootStore;    constructor(rootStore: typeof RootStore) {        this.rootStore = rootStore;    }    async sendOrder(order: SendDataOrderType): Promise<boolean | void> {        this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.OrderStore.sendOrder(order);            return true        } catch (e) {            console.log(e)            this.rootStore.Notification.setNotification('error', true, 'sendOrder err');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async getOrders(payload: { status?: StatusType, limit?: number, offset?: number }): Promise<OrdersResponseType | void> {       // this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            return await this.rootStore.OrderStore.getOrders(this.rootStore.AuthStore.user._id, payload.status, payload.limit, payload.offset);        } catch (e) {            this.rootStore.Notification.setNotification('error', true, 'getOrders err');        } finally {           // this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }}export default OrderService;