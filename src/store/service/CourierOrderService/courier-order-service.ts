import RootStore from '../../RootStore/root-store'import { StatusType } from '../../../api/ordersApi'import { LoadingEnum } from '../../types/types'import {PayloadOrdersType} from "../../../api/couierApi";export class CourierOrderService {	rootStore: typeof RootStore	constructor(rootStore: typeof RootStore) {		this.rootStore = rootStore	}	async getCourierOrders(): Promise<void> {		/*this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)*/		try {			return await this.rootStore.CourierOrderStore.getCourierOrders()		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			this.rootStore.Notification.setNotification('error', true, e, redirectToLoginHandler)		} finally {		/*	this.rootStore.Notification.setIsLoading(LoadingEnum.success)*/		}	}	async getTakenCourierOrders(payload?: PayloadOrdersType): Promise<void> {		console.log(payload)		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			return await this.rootStore.CourierOrderStore.getTakenCourierOrders(				this.rootStore.AuthStore.user._id,				payload			)		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			this.rootStore.Notification.setNotification('error', true, e, redirectToLoginHandler)		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}	async assignCourierOrder() {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			return await this.rootStore.CourierOrderStore.assignCourierOrder(				this.rootStore.AuthStore.user._id			)		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			this.rootStore.Notification.setNotification('error', true, e, redirectToLoginHandler)		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}	async updateOrderStatus(status: StatusType): Promise<void> {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			return await this.rootStore.CourierOrderStore.updateOrderStatus(status)		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			this.rootStore.Notification.setNotification('error', true, e, redirectToLoginHandler)		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}}export default CourierOrderService