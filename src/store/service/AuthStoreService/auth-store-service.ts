import RootStore from '../../RootStore/root-store';import { LoadingEnum } from '../../types/types'export class AuthStoreService {    rootStore: typeof RootStore;    constructor(rootStore: typeof RootStore) {        this.rootStore = rootStore;    }    async registration(userData: any): Promise<void> {        //this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {           // await this.rootStore.AuthStore.registration(userData);           // await this.rootStore.AuthStore.login({email: userData.email, password: userData.password});        } catch (e) {          //  this.rootStore.Notification.setNotification('error', true, 'Пользователь с таким email уже существует');        } finally {            //this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async login(userData: { email: string; password: string }): Promise<void> {       this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.login({email: userData.email, password: userData.password});            await this.rootStore.AuthStore.getMe()        } catch (e) {          this.rootStore.Notification.setNotification('error', true, 'Incorrect data has been entered');        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }    async checkAuth(): Promise<void> {         this.rootStore.Notification.setIsLoading(LoadingEnum.fetching);        try {            await this.rootStore.AuthStore.checkAuth()            await this.rootStore.AuthStore.getMe()        } catch (e) {        } finally {            this.rootStore.Notification.setIsLoading(LoadingEnum.success);        }    }}export default AuthStoreService;